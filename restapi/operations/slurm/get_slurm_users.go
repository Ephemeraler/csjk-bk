// Code generated by go-swagger; DO NOT EDIT.

package slurm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"csjk-bk/models"
)

// GetSlurmUsersHandlerFunc turns a function with the right signature into a get slurm users handler
type GetSlurmUsersHandlerFunc func(GetSlurmUsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSlurmUsersHandlerFunc) Handle(params GetSlurmUsersParams) middleware.Responder {
	return fn(params)
}

// GetSlurmUsersHandler interface for that can handle valid get slurm users params
type GetSlurmUsersHandler interface {
	Handle(GetSlurmUsersParams) middleware.Responder
}

// NewGetSlurmUsers creates a new http.Handler for the get slurm users operation
func NewGetSlurmUsers(ctx *middleware.Context, handler GetSlurmUsersHandler) *GetSlurmUsers {
	return &GetSlurmUsers{Context: ctx, Handler: handler}
}

/*
	GetSlurmUsers swagger:route GET /slurm/users slurm kd getSlurmUsers

获取 slurm 所有用户信息, 以列表形式返回.

获取 slurm 所有用户信息, 以列表形式返回. 该 API 用户"资源管理-资源监控, 过滤面板中用户控件". 该 API 由科大提供.
*/
type GetSlurmUsers struct {
	Context *middleware.Context
	Handler GetSlurmUsersHandler
}

func (o *GetSlurmUsers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSlurmUsersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetSlurmUsersOKBody get slurm users o k body
//
// swagger:model GetSlurmUsersOKBody
type GetSlurmUsersOKBody struct {
	models.CommonResponse

	// results
	Results []*GetSlurmUsersOKBodyResultsItems0 `json:"results"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSlurmUsersOKBody) UnmarshalJSON(raw []byte) error {
	// GetSlurmUsersOKBodyAO0
	var getSlurmUsersOKBodyAO0 models.CommonResponse
	if err := swag.ReadJSON(raw, &getSlurmUsersOKBodyAO0); err != nil {
		return err
	}
	o.CommonResponse = getSlurmUsersOKBodyAO0

	// GetSlurmUsersOKBodyAO1
	var dataGetSlurmUsersOKBodyAO1 struct {
		Results []*GetSlurmUsersOKBodyResultsItems0 `json:"results"`
	}
	if err := swag.ReadJSON(raw, &dataGetSlurmUsersOKBodyAO1); err != nil {
		return err
	}

	o.Results = dataGetSlurmUsersOKBodyAO1.Results

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSlurmUsersOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getSlurmUsersOKBodyAO0, err := swag.WriteJSON(o.CommonResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSlurmUsersOKBodyAO0)
	var dataGetSlurmUsersOKBodyAO1 struct {
		Results []*GetSlurmUsersOKBodyResultsItems0 `json:"results"`
	}

	dataGetSlurmUsersOKBodyAO1.Results = o.Results

	jsonDataGetSlurmUsersOKBodyAO1, errGetSlurmUsersOKBodyAO1 := swag.WriteJSON(dataGetSlurmUsersOKBodyAO1)
	if errGetSlurmUsersOKBodyAO1 != nil {
		return nil, errGetSlurmUsersOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetSlurmUsersOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get slurm users o k body
func (o *GetSlurmUsersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSlurmUsersOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSlurmUsersOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSlurmUsersOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get slurm users o k body based on the context it is used
func (o *GetSlurmUsersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSlurmUsersOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Results); i++ {

		if o.Results[i] != nil {

			if swag.IsZero(o.Results[i]) { // not required
				return nil
			}

			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSlurmUsersOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSlurmUsersOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSlurmUsersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSlurmUsersOKBody) UnmarshalBinary(b []byte) error {
	var res GetSlurmUsersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetSlurmUsersOKBodyResultsItems0 get slurm users o k body results items0
//
// swagger:model GetSlurmUsersOKBodyResultsItems0
type GetSlurmUsersOKBodyResultsItems0 struct {

	// 用户ID, 对应Linux系统UID.
	ID int64 `json:"id,omitempty"`

	// 用户名称
	Name string `json:"name,omitempty"`
}

// Validate validates this get slurm users o k body results items0
func (o *GetSlurmUsersOKBodyResultsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get slurm users o k body results items0 based on context it is used
func (o *GetSlurmUsersOKBodyResultsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSlurmUsersOKBodyResultsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSlurmUsersOKBodyResultsItems0) UnmarshalBinary(b []byte) error {
	var res GetSlurmUsersOKBodyResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
