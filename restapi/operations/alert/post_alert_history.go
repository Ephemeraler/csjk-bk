// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"csjk-bk/models"
)

// PostAlertHistoryHandlerFunc turns a function with the right signature into a post alert history handler
type PostAlertHistoryHandlerFunc func(PostAlertHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAlertHistoryHandlerFunc) Handle(params PostAlertHistoryParams) middleware.Responder {
	return fn(params)
}

// PostAlertHistoryHandler interface for that can handle valid post alert history params
type PostAlertHistoryHandler interface {
	Handle(PostAlertHistoryParams) middleware.Responder
}

// NewPostAlertHistory creates a new http.Handler for the post alert history operation
func NewPostAlertHistory(ctx *middleware.Context, handler PostAlertHistoryHandler) *PostAlertHistory {
	return &PostAlertHistory{Context: ctx, Handler: handler}
}

/*
	PostAlertHistory swagger:route POST /alerts/history alert postAlertHistory

获取历史报警信息.

前置条件:
 1. 数据来源统一, 所有事件与报警汇聚点为 Alertmanager, 均存储在 PG.Alert 相关表中;
 2. 前端使用的标签名与标签对应值返回应该与报警内容信息保持一致或者能够唯一映射;

使用方式:

	为保持良好扩展性, 该 API 不会固定具体筛选Labels Key与Annotations Key. 均由前端自己确认 Key 与 Value, 传递给后端进行筛选.
	- 报警管理.历史事件和报警
	  - 分屏显示(开): 该 API 均可使用, 只需传递对应筛选参数即可.
	  - 分屏显示(关): 不同分屏表示的类别需要传递必须参数, 如带内报警, 则需要在body.labels中传递 source: ["inband"].
*/
type PostAlertHistory struct {
	Context *middleware.Context
	Handler PostAlertHistoryHandler
}

func (o *PostAlertHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAlertHistoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAlertHistoryBody post alert history body
//
// swagger:model PostAlertHistoryBody
type PostAlertHistoryBody struct {

	// 用于筛选警报的注解键值对, 支持多个值
	Annotations map[string][]string `json:"annotations,omitempty"`

	// 查询结束时间
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// 用于筛选警报的标签键值对, 支持多个值
	Labels map[string][]string `json:"labels,omitempty"`

	// 页码
	Page int64 `json:"page,omitempty"`

	// 页数据条目数
	PageSize int64 `json:"page_size,omitempty"`

	// 查询开始时间
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// 报警状态, 可选值包括 firing, resolved
	Status []string `json:"status"`
}

// Validate validates this post alert history body
func (o *PostAlertHistoryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAlertHistoryBody) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostAlertHistoryBody) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post alert history body based on context it is used
func (o *PostAlertHistoryBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAlertHistoryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAlertHistoryBody) UnmarshalBinary(b []byte) error {
	var res PostAlertHistoryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostAlertHistoryOKBody post alert history o k body
//
// swagger:model PostAlertHistoryOKBody
type PostAlertHistoryOKBody struct {
	models.CommonResponse

	models.Alerts
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostAlertHistoryOKBody) UnmarshalJSON(raw []byte) error {
	// PostAlertHistoryOKBodyAO0
	var postAlertHistoryOKBodyAO0 models.CommonResponse
	if err := swag.ReadJSON(raw, &postAlertHistoryOKBodyAO0); err != nil {
		return err
	}
	o.CommonResponse = postAlertHistoryOKBodyAO0

	// PostAlertHistoryOKBodyAO1
	var postAlertHistoryOKBodyAO1 models.Alerts
	if err := swag.ReadJSON(raw, &postAlertHistoryOKBodyAO1); err != nil {
		return err
	}
	o.Alerts = postAlertHistoryOKBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostAlertHistoryOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postAlertHistoryOKBodyAO0, err := swag.WriteJSON(o.CommonResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postAlertHistoryOKBodyAO0)

	postAlertHistoryOKBodyAO1, err := swag.WriteJSON(o.Alerts)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postAlertHistoryOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post alert history o k body
func (o *PostAlertHistoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.Alerts
	if err := o.Alerts.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post alert history o k body based on the context it is used
func (o *PostAlertHistoryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.Alerts
	if err := o.Alerts.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostAlertHistoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAlertHistoryOKBody) UnmarshalBinary(b []byte) error {
	var res PostAlertHistoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
