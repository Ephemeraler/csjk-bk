// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"csjk-bk/models"
)

// GetFiringAlertsOKCode is the HTTP code returned for type GetFiringAlertsOK
const GetFiringAlertsOKCode int = 200

/*
GetFiringAlertsOK 获取活跃报警数据

swagger:response getFiringAlertsOK
*/
type GetFiringAlertsOK struct {

	/*
	  In: Body
	*/
	Payload *GetFiringAlertsOKBody `json:"body,omitempty"`
}

// NewGetFiringAlertsOK creates GetFiringAlertsOK with default headers values
func NewGetFiringAlertsOK() *GetFiringAlertsOK {

	return &GetFiringAlertsOK{}
}

// WithPayload adds the payload to the get firing alerts o k response
func (o *GetFiringAlertsOK) WithPayload(payload *GetFiringAlertsOKBody) *GetFiringAlertsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get firing alerts o k response
func (o *GetFiringAlertsOK) SetPayload(payload *GetFiringAlertsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFiringAlertsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFiringAlertsBadRequestCode is the HTTP code returned for type GetFiringAlertsBadRequest
const GetFiringAlertsBadRequestCode int = 400

/*
GetFiringAlertsBadRequest 请求参数错误

swagger:response getFiringAlertsBadRequest
*/
type GetFiringAlertsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewGetFiringAlertsBadRequest creates GetFiringAlertsBadRequest with default headers values
func NewGetFiringAlertsBadRequest() *GetFiringAlertsBadRequest {

	return &GetFiringAlertsBadRequest{}
}

// WithPayload adds the payload to the get firing alerts bad request response
func (o *GetFiringAlertsBadRequest) WithPayload(payload *models.StandardResponse) *GetFiringAlertsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get firing alerts bad request response
func (o *GetFiringAlertsBadRequest) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFiringAlertsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFiringAlertsInternalServerErrorCode is the HTTP code returned for type GetFiringAlertsInternalServerError
const GetFiringAlertsInternalServerErrorCode int = 500

/*
GetFiringAlertsInternalServerError 内部服务错误

swagger:response getFiringAlertsInternalServerError
*/
type GetFiringAlertsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewGetFiringAlertsInternalServerError creates GetFiringAlertsInternalServerError with default headers values
func NewGetFiringAlertsInternalServerError() *GetFiringAlertsInternalServerError {

	return &GetFiringAlertsInternalServerError{}
}

// WithPayload adds the payload to the get firing alerts internal server error response
func (o *GetFiringAlertsInternalServerError) WithPayload(payload *models.StandardResponse) *GetFiringAlertsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get firing alerts internal server error response
func (o *GetFiringAlertsInternalServerError) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFiringAlertsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
