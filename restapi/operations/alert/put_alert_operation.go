// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutAlertOperationHandlerFunc turns a function with the right signature into a put alert operation handler
type PutAlertOperationHandlerFunc func(PutAlertOperationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutAlertOperationHandlerFunc) Handle(params PutAlertOperationParams) middleware.Responder {
	return fn(params)
}

// PutAlertOperationHandler interface for that can handle valid put alert operation params
type PutAlertOperationHandler interface {
	Handle(PutAlertOperationParams) middleware.Responder
}

// NewPutAlertOperation creates a new http.Handler for the put alert operation operation
func NewPutAlertOperation(ctx *middleware.Context, handler PutAlertOperationHandler) *PutAlertOperation {
	return &PutAlertOperation{Context: ctx, Handler: handler}
}

/*
	PutAlertOperation swagger:route PUT /alerts/operation alert putAlertOperation

更新报警处理人和处理方式.

更新报警处理人和处理方式.
*/
type PutAlertOperation struct {
	Context *middleware.Context
	Handler PutAlertOperationHandler
}

func (o *PutAlertOperation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutAlertOperationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutAlertOperationBody put alert operation body
//
// swagger:model PutAlertOperationBody
type PutAlertOperationBody struct {

	// 报警ID列表
	// Required: true
	Ids *int64 `json:"ids"`

	// 处理方式
	// Required: true
	Operation *string `json:"operation"`

	// 处理人
	// Required: true
	Responder *string `json:"responder"`
}

// Validate validates this put alert operation body
func (o *PutAlertOperationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutAlertOperationBody) validateIds(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"ids", "body", o.Ids); err != nil {
		return err
	}

	return nil
}

func (o *PutAlertOperationBody) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"operation", "body", o.Operation); err != nil {
		return err
	}

	return nil
}

func (o *PutAlertOperationBody) validateResponder(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"responder", "body", o.Responder); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put alert operation body based on context it is used
func (o *PutAlertOperationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAlertOperationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAlertOperationBody) UnmarshalBinary(b []byte) error {
	var res PutAlertOperationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
