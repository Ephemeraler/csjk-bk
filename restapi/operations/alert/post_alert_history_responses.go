// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"csjk-bk/models"
)

// PostAlertHistoryOKCode is the HTTP code returned for type PostAlertHistoryOK
const PostAlertHistoryOKCode int = 200

/*
PostAlertHistoryOK 获取活跃报警数据

swagger:response postAlertHistoryOK
*/
type PostAlertHistoryOK struct {

	/*
	  In: Body
	*/
	Payload *PostAlertHistoryOKBody `json:"body,omitempty"`
}

// NewPostAlertHistoryOK creates PostAlertHistoryOK with default headers values
func NewPostAlertHistoryOK() *PostAlertHistoryOK {

	return &PostAlertHistoryOK{}
}

// WithPayload adds the payload to the post alert history o k response
func (o *PostAlertHistoryOK) WithPayload(payload *PostAlertHistoryOKBody) *PostAlertHistoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post alert history o k response
func (o *PostAlertHistoryOK) SetPayload(payload *PostAlertHistoryOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAlertHistoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAlertHistoryBadRequestCode is the HTTP code returned for type PostAlertHistoryBadRequest
const PostAlertHistoryBadRequestCode int = 400

/*
PostAlertHistoryBadRequest 请求参数错误

swagger:response postAlertHistoryBadRequest
*/
type PostAlertHistoryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewPostAlertHistoryBadRequest creates PostAlertHistoryBadRequest with default headers values
func NewPostAlertHistoryBadRequest() *PostAlertHistoryBadRequest {

	return &PostAlertHistoryBadRequest{}
}

// WithPayload adds the payload to the post alert history bad request response
func (o *PostAlertHistoryBadRequest) WithPayload(payload *models.StandardResponse) *PostAlertHistoryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post alert history bad request response
func (o *PostAlertHistoryBadRequest) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAlertHistoryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAlertHistoryInternalServerErrorCode is the HTTP code returned for type PostAlertHistoryInternalServerError
const PostAlertHistoryInternalServerErrorCode int = 500

/*
PostAlertHistoryInternalServerError 内部服务错误

swagger:response postAlertHistoryInternalServerError
*/
type PostAlertHistoryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewPostAlertHistoryInternalServerError creates PostAlertHistoryInternalServerError with default headers values
func NewPostAlertHistoryInternalServerError() *PostAlertHistoryInternalServerError {

	return &PostAlertHistoryInternalServerError{}
}

// WithPayload adds the payload to the post alert history internal server error response
func (o *PostAlertHistoryInternalServerError) WithPayload(payload *models.StandardResponse) *PostAlertHistoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post alert history internal server error response
func (o *PostAlertHistoryInternalServerError) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAlertHistoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
