// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"csjk-bk/models"
)

// GetAlertLabelNamesOKCode is the HTTP code returned for type GetAlertLabelNamesOK
const GetAlertLabelNamesOKCode int = 200

/*
GetAlertLabelNamesOK 成功响应

swagger:response getAlertLabelNamesOK
*/
type GetAlertLabelNamesOK struct {

	/*
	  In: Body
	*/
	Payload *GetAlertLabelNamesOKBody `json:"body,omitempty"`
}

// NewGetAlertLabelNamesOK creates GetAlertLabelNamesOK with default headers values
func NewGetAlertLabelNamesOK() *GetAlertLabelNamesOK {

	return &GetAlertLabelNamesOK{}
}

// WithPayload adds the payload to the get alert label names o k response
func (o *GetAlertLabelNamesOK) WithPayload(payload *GetAlertLabelNamesOKBody) *GetAlertLabelNamesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert label names o k response
func (o *GetAlertLabelNamesOK) SetPayload(payload *GetAlertLabelNamesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertLabelNamesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAlertLabelNamesBadRequestCode is the HTTP code returned for type GetAlertLabelNamesBadRequest
const GetAlertLabelNamesBadRequestCode int = 400

/*
GetAlertLabelNamesBadRequest 请求参数错误

swagger:response getAlertLabelNamesBadRequest
*/
type GetAlertLabelNamesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewGetAlertLabelNamesBadRequest creates GetAlertLabelNamesBadRequest with default headers values
func NewGetAlertLabelNamesBadRequest() *GetAlertLabelNamesBadRequest {

	return &GetAlertLabelNamesBadRequest{}
}

// WithPayload adds the payload to the get alert label names bad request response
func (o *GetAlertLabelNamesBadRequest) WithPayload(payload *models.StandardResponse) *GetAlertLabelNamesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert label names bad request response
func (o *GetAlertLabelNamesBadRequest) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertLabelNamesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAlertLabelNamesInternalServerErrorCode is the HTTP code returned for type GetAlertLabelNamesInternalServerError
const GetAlertLabelNamesInternalServerErrorCode int = 500

/*
GetAlertLabelNamesInternalServerError 内部服务错误

swagger:response getAlertLabelNamesInternalServerError
*/
type GetAlertLabelNamesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewGetAlertLabelNamesInternalServerError creates GetAlertLabelNamesInternalServerError with default headers values
func NewGetAlertLabelNamesInternalServerError() *GetAlertLabelNamesInternalServerError {

	return &GetAlertLabelNamesInternalServerError{}
}

// WithPayload adds the payload to the get alert label names internal server error response
func (o *GetAlertLabelNamesInternalServerError) WithPayload(payload *models.StandardResponse) *GetAlertLabelNamesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert label names internal server error response
func (o *GetAlertLabelNamesInternalServerError) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertLabelNamesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
