// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"csjk-bk/models"
)

// GetAlertLabelValuesHandlerFunc turns a function with the right signature into a get alert label values handler
type GetAlertLabelValuesHandlerFunc func(GetAlertLabelValuesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAlertLabelValuesHandlerFunc) Handle(params GetAlertLabelValuesParams) middleware.Responder {
	return fn(params)
}

// GetAlertLabelValuesHandler interface for that can handle valid get alert label values params
type GetAlertLabelValuesHandler interface {
	Handle(GetAlertLabelValuesParams) middleware.Responder
}

// NewGetAlertLabelValues creates a new http.Handler for the get alert label values operation
func NewGetAlertLabelValues(ctx *middleware.Context, handler GetAlertLabelValuesHandler) *GetAlertLabelValues {
	return &GetAlertLabelValues{Context: ctx, Handler: handler}
}

/*
	GetAlertLabelValues swagger:route GET /alerts/label/{labelname}/values alert getAlertLabelValues

获取所有报警标签的所有标签值.

获取所有报警标签的所有标签值.
*/
type GetAlertLabelValues struct {
	Context *middleware.Context
	Handler GetAlertLabelValuesHandler
}

func (o *GetAlertLabelValues) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAlertLabelValuesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAlertLabelValuesOKBody get alert label values o k body
//
// swagger:model GetAlertLabelValuesOKBody
type GetAlertLabelValuesOKBody struct {
	models.CommonResponse

	// results
	Results []string `json:"results"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetAlertLabelValuesOKBody) UnmarshalJSON(raw []byte) error {
	// GetAlertLabelValuesOKBodyAO0
	var getAlertLabelValuesOKBodyAO0 models.CommonResponse
	if err := swag.ReadJSON(raw, &getAlertLabelValuesOKBodyAO0); err != nil {
		return err
	}
	o.CommonResponse = getAlertLabelValuesOKBodyAO0

	// GetAlertLabelValuesOKBodyAO1
	var dataGetAlertLabelValuesOKBodyAO1 struct {
		Results []string `json:"results"`
	}
	if err := swag.ReadJSON(raw, &dataGetAlertLabelValuesOKBodyAO1); err != nil {
		return err
	}

	o.Results = dataGetAlertLabelValuesOKBodyAO1.Results

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetAlertLabelValuesOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getAlertLabelValuesOKBodyAO0, err := swag.WriteJSON(o.CommonResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getAlertLabelValuesOKBodyAO0)
	var dataGetAlertLabelValuesOKBodyAO1 struct {
		Results []string `json:"results"`
	}

	dataGetAlertLabelValuesOKBodyAO1.Results = o.Results

	jsonDataGetAlertLabelValuesOKBodyAO1, errGetAlertLabelValuesOKBodyAO1 := swag.WriteJSON(dataGetAlertLabelValuesOKBodyAO1)
	if errGetAlertLabelValuesOKBodyAO1 != nil {
		return nil, errGetAlertLabelValuesOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetAlertLabelValuesOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get alert label values o k body
func (o *GetAlertLabelValuesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this get alert label values o k body based on the context it is used
func (o *GetAlertLabelValuesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetAlertLabelValuesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAlertLabelValuesOKBody) UnmarshalBinary(b []byte) error {
	var res GetAlertLabelValuesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
