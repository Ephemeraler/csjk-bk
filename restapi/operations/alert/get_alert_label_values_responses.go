// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"csjk-bk/models"
)

// GetAlertLabelValuesOKCode is the HTTP code returned for type GetAlertLabelValuesOK
const GetAlertLabelValuesOKCode int = 200

/*
GetAlertLabelValuesOK 成功响应

swagger:response getAlertLabelValuesOK
*/
type GetAlertLabelValuesOK struct {

	/*
	  In: Body
	*/
	Payload *GetAlertLabelValuesOKBody `json:"body,omitempty"`
}

// NewGetAlertLabelValuesOK creates GetAlertLabelValuesOK with default headers values
func NewGetAlertLabelValuesOK() *GetAlertLabelValuesOK {

	return &GetAlertLabelValuesOK{}
}

// WithPayload adds the payload to the get alert label values o k response
func (o *GetAlertLabelValuesOK) WithPayload(payload *GetAlertLabelValuesOKBody) *GetAlertLabelValuesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert label values o k response
func (o *GetAlertLabelValuesOK) SetPayload(payload *GetAlertLabelValuesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertLabelValuesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAlertLabelValuesBadRequestCode is the HTTP code returned for type GetAlertLabelValuesBadRequest
const GetAlertLabelValuesBadRequestCode int = 400

/*
GetAlertLabelValuesBadRequest 请求参数错误

swagger:response getAlertLabelValuesBadRequest
*/
type GetAlertLabelValuesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewGetAlertLabelValuesBadRequest creates GetAlertLabelValuesBadRequest with default headers values
func NewGetAlertLabelValuesBadRequest() *GetAlertLabelValuesBadRequest {

	return &GetAlertLabelValuesBadRequest{}
}

// WithPayload adds the payload to the get alert label values bad request response
func (o *GetAlertLabelValuesBadRequest) WithPayload(payload *models.StandardResponse) *GetAlertLabelValuesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert label values bad request response
func (o *GetAlertLabelValuesBadRequest) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertLabelValuesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAlertLabelValuesInternalServerErrorCode is the HTTP code returned for type GetAlertLabelValuesInternalServerError
const GetAlertLabelValuesInternalServerErrorCode int = 500

/*
GetAlertLabelValuesInternalServerError 内部服务错误

swagger:response getAlertLabelValuesInternalServerError
*/
type GetAlertLabelValuesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewGetAlertLabelValuesInternalServerError creates GetAlertLabelValuesInternalServerError with default headers values
func NewGetAlertLabelValuesInternalServerError() *GetAlertLabelValuesInternalServerError {

	return &GetAlertLabelValuesInternalServerError{}
}

// WithPayload adds the payload to the get alert label values internal server error response
func (o *GetAlertLabelValuesInternalServerError) WithPayload(payload *models.StandardResponse) *GetAlertLabelValuesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get alert label values internal server error response
func (o *GetAlertLabelValuesInternalServerError) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAlertLabelValuesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
