// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"csjk-bk/models"
)

// GetFiringAlertsHandlerFunc turns a function with the right signature into a get firing alerts handler
type GetFiringAlertsHandlerFunc func(GetFiringAlertsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFiringAlertsHandlerFunc) Handle(params GetFiringAlertsParams) middleware.Responder {
	return fn(params)
}

// GetFiringAlertsHandler interface for that can handle valid get firing alerts params
type GetFiringAlertsHandler interface {
	Handle(GetFiringAlertsParams) middleware.Responder
}

// NewGetFiringAlerts creates a new http.Handler for the get firing alerts operation
func NewGetFiringAlerts(ctx *middleware.Context, handler GetFiringAlertsHandler) *GetFiringAlerts {
	return &GetFiringAlerts{Context: ctx, Handler: handler}
}

/*
	GetFiringAlerts swagger:route GET /alerts/firing alert getFiringAlerts

获取活跃报警信息.

前置条件:
 1. 不同报警/事件汇集点在 Alertmanager. 使用标签 source 字段标识报警来源, 如带内(inband)、带外(outband)、事件(event);
 2. 报警标签必须包含: source(报警来源), severity(报警级别, 不同来源解释不同级别);

使用方式:
- 报警管理.活跃事件和报警
  - 分屏显示(开): 不同类别报警对应的屏与报警数量统计数据通过不同 API 请求. 示例请求带外报警数据: GET <basePath>/alerts/firing?filter=souorce=outband&page=&page_size=
  - 分屏显示(关): 无需传递filter参数, 所有数据统一返回.
*/
type GetFiringAlerts struct {
	Context *middleware.Context
	Handler GetFiringAlertsHandler
}

func (o *GetFiringAlerts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFiringAlertsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetFiringAlertsOKBody get firing alerts o k body
//
// swagger:model GetFiringAlertsOKBody
type GetFiringAlertsOKBody struct {
	models.CommonResponse

	// results
	Results *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results `json:"results,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetFiringAlertsOKBody) UnmarshalJSON(raw []byte) error {
	// GetFiringAlertsOKBodyAO0
	var getFiringAlertsOKBodyAO0 models.CommonResponse
	if err := swag.ReadJSON(raw, &getFiringAlertsOKBodyAO0); err != nil {
		return err
	}
	o.CommonResponse = getFiringAlertsOKBodyAO0

	// GetFiringAlertsOKBodyAO1
	var dataGetFiringAlertsOKBodyAO1 struct {
		Results *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results `json:"results,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetFiringAlertsOKBodyAO1); err != nil {
		return err
	}

	o.Results = dataGetFiringAlertsOKBodyAO1.Results

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetFiringAlertsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getFiringAlertsOKBodyAO0, err := swag.WriteJSON(o.CommonResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getFiringAlertsOKBodyAO0)
	var dataGetFiringAlertsOKBodyAO1 struct {
		Results *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results `json:"results,omitempty"`
	}

	dataGetFiringAlertsOKBodyAO1.Results = o.Results

	jsonDataGetFiringAlertsOKBodyAO1, errGetFiringAlertsOKBodyAO1 := swag.WriteJSON(dataGetFiringAlertsOKBodyAO1)
	if errGetFiringAlertsOKBodyAO1 != nil {
		return nil, errGetFiringAlertsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetFiringAlertsOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get firing alerts o k body
func (o *GetFiringAlertsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	if o.Results != nil {
		if err := o.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsOK" + "." + "results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get firing alerts o k body based on the context it is used
func (o *GetFiringAlertsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if o.Results != nil {

		if swag.IsZero(o.Results) { // not required
			return nil
		}

		if err := o.Results.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsOK" + "." + "results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFiringAlertsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiringAlertsOKBody) UnmarshalBinary(b []byte) error {
	var res GetFiringAlertsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results get firing alerts o k body get firing alerts o k body a o1 results
//
// swagger:model GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results
type GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results struct {

	// alerts
	Alerts models.Alerts `json:"alerts,omitempty"`

	// severity count
	SeverityCount *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount `json:"severity_count,omitempty"`
}

// Validate validates this get firing alerts o k body get firing alerts o k body a o1 results
func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeverityCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results) validateAlerts(formats strfmt.Registry) error {
	if swag.IsZero(o.Alerts) { // not required
		return nil
	}

	if err := o.Alerts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getFiringAlertsOK" + "." + "results" + "." + "alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getFiringAlertsOK" + "." + "results" + "." + "alerts")
		}
		return err
	}

	return nil
}

func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results) validateSeverityCount(formats strfmt.Registry) error {
	if swag.IsZero(o.SeverityCount) { // not required
		return nil
	}

	if o.SeverityCount != nil {
		if err := o.SeverityCount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsOK" + "." + "results" + "." + "severity_count")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsOK" + "." + "results" + "." + "severity_count")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get firing alerts o k body get firing alerts o k body a o1 results based on the context it is used
func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSeverityCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Alerts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getFiringAlertsOK" + "." + "results" + "." + "alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getFiringAlertsOK" + "." + "results" + "." + "alerts")
		}
		return err
	}

	return nil
}

func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results) contextValidateSeverityCount(ctx context.Context, formats strfmt.Registry) error {

	if o.SeverityCount != nil {

		if swag.IsZero(o.SeverityCount) { // not required
			return nil
		}

		if err := o.SeverityCount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsOK" + "." + "results" + "." + "severity_count")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsOK" + "." + "results" + "." + "severity_count")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results) UnmarshalBinary(b []byte) error {
	var res GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1Results
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount get firing alerts o k body get firing alerts o k body a o1 results severity count
//
// swagger:model GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount
type GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount struct {

	// event
	Event map[string]int64 `json:"event,omitempty"`

	// inband
	Inband map[string]int64 `json:"inband,omitempty"`

	// outband
	Outband map[string]int64 `json:"outband,omitempty"`
}

// Validate validates this get firing alerts o k body get firing alerts o k body a o1 results severity count
func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get firing alerts o k body get firing alerts o k body a o1 results severity count based on context it is used
func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount) UnmarshalBinary(b []byte) error {
	var res GetFiringAlertsOKBodyGetFiringAlertsOKBodyAO1ResultsSeverityCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
