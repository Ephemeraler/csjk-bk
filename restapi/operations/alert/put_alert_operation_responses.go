// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"csjk-bk/models"
)

// PutAlertOperationOKCode is the HTTP code returned for type PutAlertOperationOK
const PutAlertOperationOKCode int = 200

/*
PutAlertOperationOK 成功响应

swagger:response putAlertOperationOK
*/
type PutAlertOperationOK struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewPutAlertOperationOK creates PutAlertOperationOK with default headers values
func NewPutAlertOperationOK() *PutAlertOperationOK {

	return &PutAlertOperationOK{}
}

// WithPayload adds the payload to the put alert operation o k response
func (o *PutAlertOperationOK) WithPayload(payload *models.StandardResponse) *PutAlertOperationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put alert operation o k response
func (o *PutAlertOperationOK) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutAlertOperationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutAlertOperationBadRequestCode is the HTTP code returned for type PutAlertOperationBadRequest
const PutAlertOperationBadRequestCode int = 400

/*
PutAlertOperationBadRequest 请求参数错误

swagger:response putAlertOperationBadRequest
*/
type PutAlertOperationBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewPutAlertOperationBadRequest creates PutAlertOperationBadRequest with default headers values
func NewPutAlertOperationBadRequest() *PutAlertOperationBadRequest {

	return &PutAlertOperationBadRequest{}
}

// WithPayload adds the payload to the put alert operation bad request response
func (o *PutAlertOperationBadRequest) WithPayload(payload *models.StandardResponse) *PutAlertOperationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put alert operation bad request response
func (o *PutAlertOperationBadRequest) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutAlertOperationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutAlertOperationInternalServerErrorCode is the HTTP code returned for type PutAlertOperationInternalServerError
const PutAlertOperationInternalServerErrorCode int = 500

/*
PutAlertOperationInternalServerError 内部服务错误

swagger:response putAlertOperationInternalServerError
*/
type PutAlertOperationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewPutAlertOperationInternalServerError creates PutAlertOperationInternalServerError with default headers values
func NewPutAlertOperationInternalServerError() *PutAlertOperationInternalServerError {

	return &PutAlertOperationInternalServerError{}
}

// WithPayload adds the payload to the put alert operation internal server error response
func (o *PutAlertOperationInternalServerError) WithPayload(payload *models.StandardResponse) *PutAlertOperationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put alert operation internal server error response
func (o *PutAlertOperationInternalServerError) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutAlertOperationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
