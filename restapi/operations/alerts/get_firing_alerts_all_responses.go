// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"csjk-bk/models"
)

// GetFiringAlertsAllOKCode is the HTTP code returned for type GetFiringAlertsAllOK
const GetFiringAlertsAllOKCode int = 200

/*
GetFiringAlertsAllOK 成功响应

swagger:response getFiringAlertsAllOK
*/
type GetFiringAlertsAllOK struct {

	/*
	  In: Body
	*/
	Payload *GetFiringAlertsAllOKBody `json:"body,omitempty"`
}

// NewGetFiringAlertsAllOK creates GetFiringAlertsAllOK with default headers values
func NewGetFiringAlertsAllOK() *GetFiringAlertsAllOK {

	return &GetFiringAlertsAllOK{}
}

// WithPayload adds the payload to the get firing alerts all o k response
func (o *GetFiringAlertsAllOK) WithPayload(payload *GetFiringAlertsAllOKBody) *GetFiringAlertsAllOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get firing alerts all o k response
func (o *GetFiringAlertsAllOK) SetPayload(payload *GetFiringAlertsAllOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFiringAlertsAllOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFiringAlertsAllBadRequestCode is the HTTP code returned for type GetFiringAlertsAllBadRequest
const GetFiringAlertsAllBadRequestCode int = 400

/*
GetFiringAlertsAllBadRequest 请求参数错误

swagger:response getFiringAlertsAllBadRequest
*/
type GetFiringAlertsAllBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewGetFiringAlertsAllBadRequest creates GetFiringAlertsAllBadRequest with default headers values
func NewGetFiringAlertsAllBadRequest() *GetFiringAlertsAllBadRequest {

	return &GetFiringAlertsAllBadRequest{}
}

// WithPayload adds the payload to the get firing alerts all bad request response
func (o *GetFiringAlertsAllBadRequest) WithPayload(payload *models.StandardResponse) *GetFiringAlertsAllBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get firing alerts all bad request response
func (o *GetFiringAlertsAllBadRequest) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFiringAlertsAllBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFiringAlertsAllInternalServerErrorCode is the HTTP code returned for type GetFiringAlertsAllInternalServerError
const GetFiringAlertsAllInternalServerErrorCode int = 500

/*
GetFiringAlertsAllInternalServerError 内部服务错误

swagger:response getFiringAlertsAllInternalServerError
*/
type GetFiringAlertsAllInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.StandardResponse `json:"body,omitempty"`
}

// NewGetFiringAlertsAllInternalServerError creates GetFiringAlertsAllInternalServerError with default headers values
func NewGetFiringAlertsAllInternalServerError() *GetFiringAlertsAllInternalServerError {

	return &GetFiringAlertsAllInternalServerError{}
}

// WithPayload adds the payload to the get firing alerts all internal server error response
func (o *GetFiringAlertsAllInternalServerError) WithPayload(payload *models.StandardResponse) *GetFiringAlertsAllInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get firing alerts all internal server error response
func (o *GetFiringAlertsAllInternalServerError) SetPayload(payload *models.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFiringAlertsAllInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
