// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"csjk-bk/models"
)

// GetFiringAlertsClassificationHandlerFunc turns a function with the right signature into a get firing alerts classification handler
type GetFiringAlertsClassificationHandlerFunc func(GetFiringAlertsClassificationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFiringAlertsClassificationHandlerFunc) Handle(params GetFiringAlertsClassificationParams) middleware.Responder {
	return fn(params)
}

// GetFiringAlertsClassificationHandler interface for that can handle valid get firing alerts classification params
type GetFiringAlertsClassificationHandler interface {
	Handle(GetFiringAlertsClassificationParams) middleware.Responder
}

// NewGetFiringAlertsClassification creates a new http.Handler for the get firing alerts classification operation
func NewGetFiringAlertsClassification(ctx *middleware.Context, handler GetFiringAlertsClassificationHandler) *GetFiringAlertsClassification {
	return &GetFiringAlertsClassification{Context: ctx, Handler: handler}
}

/*
	GetFiringAlertsClassification swagger:route GET /alerts/firing/classification alerts getFiringAlertsClassification

获取活跃报警

以分页方式返回所有活跃报警信息, 该 API 为报警管理-活跃时间和报警页面中 "分屏" 报警信息请求.
*/
type GetFiringAlertsClassification struct {
	Context *middleware.Context
	Handler GetFiringAlertsClassificationHandler
}

func (o *GetFiringAlertsClassification) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFiringAlertsClassificationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetFiringAlertsClassificationOKBody get firing alerts classification o k body
//
// swagger:model GetFiringAlertsClassificationOKBody
type GetFiringAlertsClassificationOKBody struct {
	models.CommonResponse

	// results
	Results *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results `json:"results,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetFiringAlertsClassificationOKBody) UnmarshalJSON(raw []byte) error {
	// GetFiringAlertsClassificationOKBodyAO0
	var getFiringAlertsClassificationOKBodyAO0 models.CommonResponse
	if err := swag.ReadJSON(raw, &getFiringAlertsClassificationOKBodyAO0); err != nil {
		return err
	}
	o.CommonResponse = getFiringAlertsClassificationOKBodyAO0

	// GetFiringAlertsClassificationOKBodyAO1
	var dataGetFiringAlertsClassificationOKBodyAO1 struct {
		Results *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results `json:"results,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetFiringAlertsClassificationOKBodyAO1); err != nil {
		return err
	}

	o.Results = dataGetFiringAlertsClassificationOKBodyAO1.Results

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetFiringAlertsClassificationOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getFiringAlertsClassificationOKBodyAO0, err := swag.WriteJSON(o.CommonResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getFiringAlertsClassificationOKBodyAO0)
	var dataGetFiringAlertsClassificationOKBodyAO1 struct {
		Results *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results `json:"results,omitempty"`
	}

	dataGetFiringAlertsClassificationOKBodyAO1.Results = o.Results

	jsonDataGetFiringAlertsClassificationOKBodyAO1, errGetFiringAlertsClassificationOKBodyAO1 := swag.WriteJSON(dataGetFiringAlertsClassificationOKBodyAO1)
	if errGetFiringAlertsClassificationOKBodyAO1 != nil {
		return nil, errGetFiringAlertsClassificationOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetFiringAlertsClassificationOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get firing alerts classification o k body
func (o *GetFiringAlertsClassificationOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsClassificationOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	if o.Results != nil {
		if err := o.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsClassificationOK" + "." + "results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsClassificationOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get firing alerts classification o k body based on the context it is used
func (o *GetFiringAlertsClassificationOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CommonResponse
	if err := o.CommonResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsClassificationOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if o.Results != nil {

		if swag.IsZero(o.Results) { // not required
			return nil
		}

		if err := o.Results.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsClassificationOK" + "." + "results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsClassificationOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFiringAlertsClassificationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiringAlertsClassificationOKBody) UnmarshalBinary(b []byte) error {
	var res GetFiringAlertsClassificationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results get firing alerts classification o k body get firing alerts classification o k body a o1 results
//
// swagger:model GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results
type GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results struct {

	// alerts
	Alerts models.Alerts `json:"alerts,omitempty"`

	// statistic
	Statistic map[string]map[string]int64 `json:"statistic,omitempty"`
}

// Validate validates this get firing alerts classification o k body get firing alerts classification o k body a o1 results
func (o *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results) validateAlerts(formats strfmt.Registry) error {
	if swag.IsZero(o.Alerts) { // not required
		return nil
	}

	if err := o.Alerts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getFiringAlertsClassificationOK" + "." + "results" + "." + "alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getFiringAlertsClassificationOK" + "." + "results" + "." + "alerts")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get firing alerts classification o k body get firing alerts classification o k body a o1 results based on the context it is used
func (o *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Alerts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getFiringAlertsClassificationOK" + "." + "results" + "." + "alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getFiringAlertsClassificationOK" + "." + "results" + "." + "alerts")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results) UnmarshalBinary(b []byte) error {
	var res GetFiringAlertsClassificationOKBodyGetFiringAlertsClassificationOKBodyAO1Results
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
