// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"csjk-bk/models"
)

// GetFiringAlertsAllHandlerFunc turns a function with the right signature into a get firing alerts all handler
type GetFiringAlertsAllHandlerFunc func(GetFiringAlertsAllParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFiringAlertsAllHandlerFunc) Handle(params GetFiringAlertsAllParams) middleware.Responder {
	return fn(params)
}

// GetFiringAlertsAllHandler interface for that can handle valid get firing alerts all params
type GetFiringAlertsAllHandler interface {
	Handle(GetFiringAlertsAllParams) middleware.Responder
}

// NewGetFiringAlertsAll creates a new http.Handler for the get firing alerts all operation
func NewGetFiringAlertsAll(ctx *middleware.Context, handler GetFiringAlertsAllHandler) *GetFiringAlertsAll {
	return &GetFiringAlertsAll{Context: ctx, Handler: handler}
}

/*
	GetFiringAlertsAll swagger:route GET /alerts/firing/all alerts getFiringAlertsAll

获取活跃报警

以分页方式返回所有活跃报警信息, 该 API 为报警管理-活跃时间和报警页面中 "非分屏" 报警信息请求.
*/
type GetFiringAlertsAll struct {
	Context *middleware.Context
	Handler GetFiringAlertsAllHandler
}

func (o *GetFiringAlertsAll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFiringAlertsAllParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetFiringAlertsAllOKBody get firing alerts all o k body
//
// swagger:model GetFiringAlertsAllOKBody
type GetFiringAlertsAllOKBody struct {
	models.StandardResponse

	// results
	Results *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results `json:"results,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetFiringAlertsAllOKBody) UnmarshalJSON(raw []byte) error {
	// GetFiringAlertsAllOKBodyAO0
	var getFiringAlertsAllOKBodyAO0 models.StandardResponse
	if err := swag.ReadJSON(raw, &getFiringAlertsAllOKBodyAO0); err != nil {
		return err
	}
	o.StandardResponse = getFiringAlertsAllOKBodyAO0

	// GetFiringAlertsAllOKBodyAO1
	var dataGetFiringAlertsAllOKBodyAO1 struct {
		Results *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results `json:"results,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetFiringAlertsAllOKBodyAO1); err != nil {
		return err
	}

	o.Results = dataGetFiringAlertsAllOKBodyAO1.Results

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetFiringAlertsAllOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getFiringAlertsAllOKBodyAO0, err := swag.WriteJSON(o.StandardResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getFiringAlertsAllOKBodyAO0)
	var dataGetFiringAlertsAllOKBodyAO1 struct {
		Results *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results `json:"results,omitempty"`
	}

	dataGetFiringAlertsAllOKBodyAO1.Results = o.Results

	jsonDataGetFiringAlertsAllOKBodyAO1, errGetFiringAlertsAllOKBodyAO1 := swag.WriteJSON(dataGetFiringAlertsAllOKBodyAO1)
	if errGetFiringAlertsAllOKBodyAO1 != nil {
		return nil, errGetFiringAlertsAllOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetFiringAlertsAllOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get firing alerts all o k body
func (o *GetFiringAlertsAllOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.StandardResponse
	if err := o.StandardResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsAllOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	if o.Results != nil {
		if err := o.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsAllOK" + "." + "results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsAllOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get firing alerts all o k body based on the context it is used
func (o *GetFiringAlertsAllOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.StandardResponse
	if err := o.StandardResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsAllOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if o.Results != nil {

		if swag.IsZero(o.Results) { // not required
			return nil
		}

		if err := o.Results.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsAllOK" + "." + "results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsAllOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFiringAlertsAllOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiringAlertsAllOKBody) UnmarshalBinary(b []byte) error {
	var res GetFiringAlertsAllOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results get firing alerts all o k body get firing alerts all o k body a o1 results
//
// swagger:model GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results
type GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results struct {

	// alerts
	Alerts models.Alerts `json:"alerts,omitempty"`

	// statistic
	Statistic *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic `json:"statistic,omitempty"`
}

// Validate validates this get firing alerts all o k body get firing alerts all o k body a o1 results
func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatistic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results) validateAlerts(formats strfmt.Registry) error {
	if swag.IsZero(o.Alerts) { // not required
		return nil
	}

	if err := o.Alerts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getFiringAlertsAllOK" + "." + "results" + "." + "alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getFiringAlertsAllOK" + "." + "results" + "." + "alerts")
		}
		return err
	}

	return nil
}

func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results) validateStatistic(formats strfmt.Registry) error {
	if swag.IsZero(o.Statistic) { // not required
		return nil
	}

	if o.Statistic != nil {
		if err := o.Statistic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsAllOK" + "." + "results" + "." + "statistic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsAllOK" + "." + "results" + "." + "statistic")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get firing alerts all o k body get firing alerts all o k body a o1 results based on the context it is used
func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStatistic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Alerts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getFiringAlertsAllOK" + "." + "results" + "." + "alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getFiringAlertsAllOK" + "." + "results" + "." + "alerts")
		}
		return err
	}

	return nil
}

func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results) contextValidateStatistic(ctx context.Context, formats strfmt.Registry) error {

	if o.Statistic != nil {

		if swag.IsZero(o.Statistic) { // not required
			return nil
		}

		if err := o.Statistic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFiringAlertsAllOK" + "." + "results" + "." + "statistic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getFiringAlertsAllOK" + "." + "results" + "." + "statistic")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results) UnmarshalBinary(b []byte) error {
	var res GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1Results
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic get firing alerts all o k body get firing alerts all o k body a o1 results statistic
//
// swagger:model GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic
type GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic struct {

	// event
	Event map[string]int64 `json:"event,omitempty"`

	// inband
	Inband map[string]int64 `json:"inband,omitempty"`

	// outband
	Outband map[string]int64 `json:"outband,omitempty"`
}

// Validate validates this get firing alerts all o k body get firing alerts all o k body a o1 results statistic
func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get firing alerts all o k body get firing alerts all o k body a o1 results statistic based on context it is used
func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic) UnmarshalBinary(b []byte) error {
	var res GetFiringAlertsAllOKBodyGetFiringAlertsAllOKBodyAO1ResultsStatistic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
