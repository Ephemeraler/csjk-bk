// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandardResponse standard response
//
// swagger:model StandardResponse
type StandardResponse struct {

	// 若请求为分页模式, 表示数据条目总数量, 否则为 -1
	Count *int64 `json:"count,omitempty"`

	// 若响应码非200, 将原因写到该字段
	Detail string `json:"detail,omitempty"`

	// 若请求为分页模式, 返回下一页请求的URL
	// Format: uri
	Next strfmt.URI `json:"next,omitempty"`

	// 若请求为分页模式, 返回上一页请求的URL
	// Format: uri
	Previous strfmt.URI `json:"previous,omitempty"`

	// 实际数据内容 (不同API返回的结构不同)
	Result interface{} `json:"result,omitempty"`
}

// Validate validates this standard response
func (m *StandardResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevious(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardResponse) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if err := validate.FormatOf("next", "body", "uri", m.Next.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StandardResponse) validatePrevious(formats strfmt.Registry) error {
	if swag.IsZero(m.Previous) { // not required
		return nil
	}

	if err := validate.FormatOf("previous", "body", "uri", m.Previous.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this standard response based on context it is used
func (m *StandardResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StandardResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardResponse) UnmarshalBinary(b []byte) error {
	var res StandardResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
