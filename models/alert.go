// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Alert alert
//
// swagger:model Alert
type Alert struct {

	// 报警标签
	Annotaions map[string]string `json:"Annotaions,omitempty"`

	// 报警结束时间
	// Format: date-time
	Endsat strfmt.DateTime `json:"Endsat,omitempty"`

	// 报警指纹
	Fingerprint string `json:"Fingerprint,omitempty"`

	// 报警生成链接
	Generatorurl string `json:"Generatorurl,omitempty"`

	// 数据库中报警ID
	ID int64 `json:"ID,omitempty"`

	// 报警标签
	Labels map[string]string `json:"Labels,omitempty"`

	// 报警处理方式
	Operation string `json:"Operation,omitempty"`

	// 报警处理人
	Responder string `json:"Responder,omitempty"`

	// 报警开始时间
	// Format: date-time
	Startsat strfmt.DateTime `json:"Startsat,omitempty"`

	// 报警状态
	Status string `json:"Status,omitempty"`
}

// Validate validates this alert
func (m *Alert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndsat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartsat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) validateEndsat(formats strfmt.Registry) error {
	if swag.IsZero(m.Endsat) { // not required
		return nil
	}

	if err := validate.FormatOf("Endsat", "body", "date-time", m.Endsat.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateStartsat(formats strfmt.Registry) error {
	if swag.IsZero(m.Startsat) { // not required
		return nil
	}

	if err := validate.FormatOf("Startsat", "body", "date-time", m.Startsat.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this alert based on context it is used
func (m *Alert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Alert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Alert) UnmarshalBinary(b []byte) error {
	var res Alert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
